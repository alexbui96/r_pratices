fit_3b <- lm(Weight ~ Species, data = data_3)
summary(fit_3b)$coef
data_3$Species <- relevel(data_3$Species, ref = "Bream")
# data_3$Species <- relevel(data_3$Species, ref = "Perch")
fit_3b <- lm(Weight ~ Species, data = data_3)
summary(fit_3b)$coef
# Predict Weight when Species is Perch
617.8286 - 235.5893
data_3$Species <- relevel(data_3$Species, ref = "Perch")
library(caret)
data_3$Species <- relevel(data_3$Species, ref = "Perch")
View(data_3)
View(data_3)
#data_3$Species <- relevel(data_3$Species, ref = "Perch")
fit_3b <- lm(Weight ~ Species, data = data_3)
summary(fit_3b)$coef
library(tidyverse)
library(leaps)
library(MASS)
library(ggplot2)
library(glmnet)
library(PairedData)
data_3$Species <- relevel(data_3$Species, ref = "Perch")
# Predict Weight when Species is Perch
617.8286 - 235.5893
data_3$Species <- relevel(data_3$Species, ref = "Perch")
# data_3$Species <- relevel(data_3$Species, ref = "Perch")
fit_3b <- lm(Weight ~ Species, data = data_3)
summary(fit_3b)$coef
# Predict Weight when Species is Perch is 382.2393
617.8286 - 235.5893
fit_3b$coefficients[1] + fit_3b$coefficients[2] * 1
data_3 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/fish.csv', header = T)
#1.
fit_3a <- lm(Weight ~ Height, data = data_3)
summary(fit_3a)$coef
# The least square equation: Weight = -164.37441 + 59.67772 * Height
# 2.
cor(data_3$Weight, data_3$Height)
# The Pearson coefficient between Weight and Height is 0.8153144
# Pearson correlation test
cor.test(data_3$Weight, data_3$Height)
# p-value of cor.test less than 2.2e-16, less than the significance level 0.05, reject null hypothesis, there are significant correlation between Weight and Height.
# 3.
summary(fit_3a)
# The coefficient of determination for the given regression is 0.6647
data_3$Species <- relevel(data_3$Species, ref = "Perch")
summary(fit_3b)$coef
data_3$Species <- relevel(data_3$Species, ref = "Perch")
model_3c <- regsubsets(Weight ~ ., data = data_3)
summary(model_3c)
which.min(summary(model_3c)$bic)
summary(model_3c)[3]
summary(model_3c)$coef[3]
which.min(summary(model_3c))
which.min(summary(model_3c)$bic)
step_3d <- stepAIC(res.lm_3d, direction = "both", trace = FALSE)
res.lm_3d <- lm(Weight ~., data = data_3)
step_3d <- stepAIC(res.lm_3d, direction = "both", trace = FALSE)
step_3d <- stepAIC(res.lm_3d, direction = "both", trace = FALSE)
step_3d
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = "\t")
View(data_4)
View(data_4)
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
View(data_4)
View(data_4)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
cv$lambda.min
x <- model.matrix(quality ~., train.data)[,-1] y <- train.data$SalePrice
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
train.data <- data[training.samples, ]
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
train.data <- data[training.samples, ]
data_4 <- na.omit(data_4)
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
train.data <- data[training.samples, ]
View(data_4)
View(data_4)
dice 1 <- sample(6, 1)
dice 1 <- sample(6)
dice 1 <- sample(6)
dice 1 <- sample(c(1:6))
dice_1 <- sample(c(1:6))
dice_1
dice_1 <- sample(c(1:6), 1)
dice_1
dice_1 <- sample(c(1:6), 1)
dice_1
res_1a <- 0
while (i in 1:5000) {
res_1a <- 0
for (i in 1:5000) {
dice_1 <- sample(c(1:6), 1)
dice_2 <- sample(c(1:6), 1)
if(dice_1 + dice_2 <= 5) res_1a <-res_1a - 5
if(dice_1 + dice_2 > 5) res_1a <- res_1a + 2
if(dice_1 + dice_2 < 10) break
if(dice_1 + dice_2 > 10) res_1a <- res_1a + 8}
res_1a
res_1a <- 0
for (i in 1:5000) {
dice_1 <- sample(c(1:6), 1)
dice_2 <- sample(c(1:6), 1)
if(dice_1 + dice_2 <= 5) res_1a <-res_1a - 5
if((dice_1 + dice_2 > 5) and (dice_1 + dice_2 < 10)) res_1a <- res_1a + 2
res_1a <- 0
for (i in 1:5000) {
dice_1 <- sample(c(1:6), 1)
dice_2 <- sample(c(1:6), 1)
if(dice_1 + dice_2 <= 5) res_1a <-res_1a - 5
if((dice_1 + dice_2 > 5) & (dice_1 + dice_2 < 10)) res_1a <- res_1a + 2
if(dice_1 + dice_2 > 10) res_1a <- res_1a + 8}
res_1a
> library(ISwR)
library(ISwR)
iris
library(iris)
iris
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
random.seed(1234)
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
train.data <- data[training.samples, ]
View(data_4)
View(data_4)
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- subset(data_4, select = -c(Id))
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = FALSE)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = T)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = F)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.80, list = T)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.8, list = T)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.8, list = T)
train.data <- data[training.samples, ]
View(training.samples)
View(training.samples)
# Dividing the data into 75% training and 25% testing
set.seed(123)
housing.samples <- housing_data$SalePrice %>%
createDataPartition(p = 0.75, list = FALSE)
knitr::opts_chunk$set(echo = TRUE)
housing_data <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/hw/05/Ames_Housing_Data.csv', header = T)
library(tidyverse)
library(caret)
library(glmnet)
colSums(is.na(housing_data))
## There is no missing values observation in this data
# Dividing the data into 75% training and 25% testing
set.seed(123)
housing.samples <- housing_data$SalePrice %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- housing_data[housing.samples, ]
test.data <- housing_data[-housing.samples, ]
# Predictor variables
x <- model.matrix(SalePrice~., train.data)[,-1]
# Outcome variable
y <- train.data$SalePrice
# Make predictions on the test data
cv_3 <- cv.glmnet(x, y, alpha = 0)
# Display the best lambda value
cv_3$lambda.min
## The best lambda value is 6452.856
model_3 <- glmnet(x, y, alpha = 0, lambda = cv_3$lambda.min)
# Display the coefficients of the fitted model
coef(model_3)
# Make predictions on the test data
x.test <- model.matrix(SalePrice ~., test.data)[,-1]
predictions_3 <- model_3 %>% predict(x.test) %>% as.vector()
# Plot predictions
plot(test.data$SalePrice ,predictions_3, xlab = "SalePrice", ylab = "Prediction")
# Model performance metrics
data.frame(
RMSE = RMSE(predictions_3, test.data$SalePrice),
Rsquare = R2(predictions_3, test.data$SalePrice)
)
# Make predictions on the test data
cv_4 <- cv.glmnet(x, y, alpha = 1)
# Display the best lambda value
cv_4$lambda.min
## The best lambda value is 352.4729
model_4 <- glmnet(x, y, alpha = 1, lambda = cv_4$lambda.min)
# Display the coefficients of the fitted model
coef(model_4)
# Make predictions on the test data
predictions_4 <- model_4 %>% predict(x.test) %>% as.vector()
# Plot predictions
plot(test.data$SalePrice ,predictions_4, xlab = "SalePrice", ylab = "Prediction")
# Model performance metrics
data.frame(
RMSE = RMSE(predictions_4, test.data$SalePrice),
Rsquare = R2(predictions_4, test.data$SalePrice)
)
model_5 <- train(
SalePrice ~., data = train.data, method = "glmnet",
trControl = trainControl("cv", number = 10),
tuneLength = 10
)
# Best tuning parameter
model_5$bestTune
coef(model_5$finalModel, model_5$bestTune$lambda)
predictions_5 <- model_5 %>% predict(test.data)
#Plot
plot(test.data$SalePrice ,predictions_5, xlab = "SalePrice", ylab = "Prediction")
# Model performance metrics
data.frame(
RMSE = RMSE(predictions_5, test.data$SalePrice),
Rsquare = R2(predictions_5, test.data$SalePrice)
)
lambda_1 <- 10^seq(-3, 3, length = 100)
# Ridge model
ridge <- train(
SalePrice ~., data = train.data, method = "glmnet",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(alpha = 0, lambda = lambda_1)
)
# Lasso model
lasso <- train(
SalePrice ~., data = train.data, method = "glmnet",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(alpha = 1, lambda = lambda_1)
)
# Elastic model
elastic <- train(
SalePrice ~., data = train.data, method = "glmnet",
trControl = trainControl("cv", number = 10),
tuneLength = 10
)
# Compare
models <- list(ridge = ridge, lasso = lasso, elastic = elastic)
resamples(models) %>% summary(metric = "RMSE")
## It can be seen that the Lasso net model has the lowest median RMSE. Hence, Lasso model is the best for the Ames Housing data.
View(housing.samples)
View(housing.samples)
View(training.samples)
View(training.samples)
data_4$quality
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
data_4$quality
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.8, list = F)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
set.seed(1234)
training.samples <- data_4$quality %>% createDataPartition(p = 0.8, list = F)
train.data <- data[training.samples, ]
colSums(is.na(data_4))
training.samples <- data_4$quality %>%
createDataPartition(p = 0.8, list = F)
train.data <- data[training.samples, ]
data_4 <- read.csv('~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 380/exam 01/red_wine.csv', header = T, sep = ";")
data_4 <- na.omit(data_4)
colSums(is.na(data_4))
set.seed(1234)
training.samples <- data_4$quality %>%
createDataPartition(p = 0.8, list = F)
train.data <- data_4[training.samples, ]
test.data <- data_4[-training.samples, ]
x <- model.matrix(quality ~., train.data)[,-1]
y <- train.data
cv <- cv.glmnet(x, y, alpha = 0)
x <- model.matrix(quality ~., train.data)[,-1]
y <- train.data
cv <- cv.glmnet(x, y, alpha = 0)
x <- model.matrix(quality ~., train.data)[,-1]
y <- train.data$quality
cv <- cv.glmnet(x, y, alpha = 0)
cv$lambda.min
model_4b1 <- glmnet(x, y, alpha = 0, lambda = cv$lambda.min)
coef(model_4b1)
x.test <- model.matrix(quality ~., test.data)[,-1]
predictions <- model_4b1 %>% predict(x.test) %>% as.vector()
data.frame(
RMSE = RMSE(predictions, test.data$quality),
Rsquare = R2(predictions, test.data$quality)
)
set.seed(1234)
cv <- cv.glmnet(x, y, alpha = 1) cv$lambda.min
set.seed(1234)
cv <- cv.glmnet(x, y, alpha = 1)
cv$lambda.min
model_4c1 <- glmnet(x, y, alpha = 1, lambda = cv$lambda.min)
coef(model_4c1)
knitr::opts_chunk$set(echo = TRUE)
wdir <- "~/Users/alexbui/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA_IV
PartA_DV
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
install.packages('mice')
library(mice)
md.pattern(PartA)
str(PartA)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
md.pattern(PartA_complete)
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
fit <- lm(DV ~ IV, data = PartA_complete)
summary(fit)
anova(fit)
plot(fit)
plot(PartA_complete$DV, PartA_complete$IV)
abline(fit)
plot(PartA_complete$DV, PartA_complete$IV)
plot(PartA_complete$IV, PartA_complete$DV, xlab= "DV", ylab = "IV")
abline(fit)
summary(fit)
plot(PartA_complete$IV ~ PartA_complete$DV, xlab= "DV", ylab = "IV")
abline(fit)
anova(fit)
plot(PartA_complete$IV ~ PartA_complete$DV, xlab= "DV", ylab = "IV")
plot(PartA_complete$IV ~ PartA_complete$DV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
abline(fit, col='red', lty=3, lwd=2)
par(mfrow = c(2,2))
plot(PartA_complete$IV ~ PartA_complete$DV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
abline(fit, col='red', lty=3, lwd=2)
fit <- lm(DV ~ IV, data = PartA_complete)
abline(fit, col='red', lty=3, lwd=2)
plot(PartA_complete$IV ~ PartA_complete$DV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
abline(fit, col='red', lty=3, lwd=2)
plot(lm(DV ~ IV, data = PartA_complete), main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
fit <- lm(DV ~ IV, data = PartA_complete)
summary(fit)
anova(fit)
plot(PartA_complete$IV ~ PartA_complete$DV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
abline(fit, col='red', lty=3, lwd=2)
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
fit <- lm(DV ~ IV, data = PartA_complete)
summary(fit)
anova(fit)
plot(PartA_complete$IV ~ PartA_complete$DV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
abline(fit)
abline(fit)
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
abline(fit)
View(fit)
View(fit)
fit <- lm(DV ~ IV, data = PartA_complete)
summary(fit)
anova(fit)
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "DV", ylab = "IV")
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "IV", ylab = "DV")
abline(fit)
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
M <- lm(DV ~ IV, data = PartA_complete)
summary(M)
anova(M)
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "IV", ylab = "DV")
abline(M)
rm(list = ls())
rm(list = ls())
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
M <- lm(DV ~ IV, data = PartA_complete)
summary(M)
anova(M)
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "IV", ylab = "DV")
abline(M)
rm(list = ls())
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
fit <- lm(DV ~ IV, data = PartA_complete)
summary(fit)
anova(fit)
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "IV", ylab = "DV")
abline(fit)
legend('topleft', legend='Estimated Regression Line', lty=3, lwd=2, col='red')
rm(list = ls())
wdir <- "~/OneDrive - Stony Brook University/SBU/MAT + AMS/Fall 2021/AMS 315/project/01/Data"
setwd(wdir)
PartA_IV <- read.csv("141951_IV.csv", header = T)
PartA_DV <- read.csv("141951_DV.csv", header = T)
PartB <- read.csv("141951_PartB.csv", header = T)
PartA <- merge(PartA_IV, PartA_DV, by = 'ID')
str(PartA)
library(mice)
md.pattern(PartA)
PartA_imp <- PartA[!is.na(PartA$IV)==TRUE|!is.na(PartA$DV)==TRUE,]
imp <- mice(PartA_imp, method = "norm.boot", printFlag = FALSE)
PartA_complete <- complete(imp)
md.pattern(PartA_complete)
fit <- lm(DV ~ IV, data = PartA_complete)
summary(fit)
anova(fit)
plot(PartA_complete$DV ~ PartA_complete$IV, main='Scatter : DV ~ IV', xlab= "IV", ylab = "DV")
abline(fit, col='red', lty=3, lwd=2)
legend('topleft', legend='Estimated Regression Line', lty=3, lwd=2, col='red')
confint(fit)
confint(fit, level = 0.95)
confint(fit, level = 0.99)
